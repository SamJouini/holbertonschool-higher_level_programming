Testinging the `my_list` class in Python
============================================

This is a docTesting file for Testinging the `my_list` class in Python.
It provides examples and of how to use the class.
Expected usage: a class MyList that inherits from list:


Import file:
------------
>>> MyList = __import__('1-my_list').MyList


Testing an empty list:
--------------------
>>> MyList().print_sorted()
[]


Testing a list with one element :
-------------------------------
>>> MyList([5]).print_sorted()
[5]


Testing a list with multiple elements:
-----------------------------------
>>> MyList([7, 9, 3, 5, 2, 0, 8]).print_sorted()
[0, 2, 3, 5, 7, 8, 9]


Testing list with different data types:
----------------------------------------
>>> my_list = MyList([1, 3, 2])
>>> my_list.print_sorted()
[1, 2, 3]


Testing append:
---------------
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(3)
>>> my_list.append(3)
>>> my_list.print_sorted()
[3, 3, 3]


Testing no sorted append negative numbers:
----------------------------------------
>>> my_list = MyList()
>>> my_list.append(-4)
>>> my_list.append(-13)
>>> my_list.append(-25)
>>> my_list.print_sorted()
[-25, -13, -4]


Testing sorting with pre-existing list:
---------------------------------------
>>> my_list = MyList([7, 9, 2, 1, 3, 5])
>>> my_list.print_sorted()
[1, 2, 3, 5, 7, 9]


Testing when input is None:
-------------------------
>>> MyList(None)
Traceback (most recent call last):
    ...
TypeError: 'NoneType' object is not iterable


Testing when input contains more than one list:
--------------------------------------------
>>> MyList([1, 4], [3, 2])
Traceback (most recent call last):
    ...
TypeError: list expected at most 1 argument, got 2


Testing __str__ method:
--------------------
>>> my_list = MyList([1, 2, 3])
>>> str(my_list)
'[1, 2, 3]'


Testing when list_no_exist is used:
--------------------------------
>>> list_no_exist.print_sorted()
Traceback (most recent call last):
    ...
NameError: name 'list_no_exist' is not defined


Testing when list is modified with += :
------------------------------------
>>> my_list = MyList()
>>> my_list += [3]
>>> my_list.print_sorted()
[3]


Testing print_sorted() returns a new list and does not modify the original list:
------------------------------------------------------------------------------
>>> my_list = MyList([5, 3, 2, 4, 1])
>>> sorted_list = my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> my_list
[5, 3, 2, 4, 1]


Testing isinstance function:
-------------------------
>>> my_list = MyList()
>>> isinstance(my_list, list)
True

